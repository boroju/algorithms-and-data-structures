body, html {
  margin: 0;
  height: 100%;
}

.container {
  display: flex;
  justify-content: center; /* Centers content horizontally */
  align-items: center; /* Centers content vertically */
  height: 100%; /* Take full height of the viewport */
}

.content {
  text-align: center; /* Center align text inside div */
  border: 2px solid #ccc;
  padding: 20px;
}

/*We set the display property of the .container div to flex, which allows us to use flexbox properties to position its child elements.
justify-content: center; horizontally centers the child elements (.content) within the .container.
align-items: center; vertically centers the child elements within the .container.
height: 100%; ensures that the .container takes up the full height of the viewport, allowing vertical centering to work properly.
Inside the .content div, we can center text or other elements using text-align: center; or other appropriate methods.*/

/* OTHER CHOICES

2. Using CSS Grid: CSS Grid layout also provides powerful capabilities for layout and alignment.
While it's primarily designed for creating two-dimensional grid-based layouts, you can use it to center elements
by placing them in the center grid cell or using alignment properties like justify-self and align-self.

3. Using Absolute Positioning: You can center a div using absolute positioning by setting top, bottom, left, and right properties to 0,
along with margin: auto;. This method is useful when you want to center an element within its containing block.

4. Using Margin Auto: You can horizontally center a block-level element by setting its left and right margins to auto.
However, this method only works for horizontal centering and doesn't support vertical centering.*/

